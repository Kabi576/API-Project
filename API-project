from flask import Flask, request, jsonify
import requests

app = Flask(__name__)


API_KEY = 'your_openweathermap_api_key'


@app.route('/weather/current', methods=['GET'])
def get_current_weather():
    location = request.args.get('location')

    if not location:
        return jsonify({'error': 'Location parameter is required.'}), 400

    
    url = f'http://api.openweathermap.org/data/2.5/weather?q={location}&appid={API_KEY}'
    response = requests.get(url)

    if response.status_code == 200:
        weather_data = response.json()

        return jsonify(weather_data)
    else:
        return jsonify({'error': 'Unable to retrieve current weather data.'}), 500


@app.route('/weather/forecast', methods=['GET'])
def get_weather_forecast():
    location = request.args.get('location')

    if not location:
        return jsonify({'error': 'Location parameter is required.'}), 400

    # Get weather forecast data from the weather API provider
    url = f'http://api.openweathermap.org/data/2.5/forecast?q={location}&appid={API_KEY}'
    response = requests.get(url)

    if response.status_code == 200:
        forecast_data = response.json()

        # Process the forecast data as needed
        # For example, extract relevant information from the JSON response

        return jsonify(forecast_data)
    else:
        return jsonify({'error': 'Unable to retrieve weather forecast data.'}), 500


@app.route('/weather/history', methods=['GET'])
def get_historical_weather():
    location = request.args.get('location')
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')

    if not location or not start_date or not end_date:
        return jsonify({'error': 'Location, start_date, and end_date parameters are required.'}), 400

    
    url = f'http://api.openweathermap.org/data/2.5/history/city?q={location}&start={start_date}&end={end_date}&appid={API_KEY}'
    response = requests.get(url)

    if response.status_code == 200:
        historical_data = response.json()

        # Process the historical data as needed
        # For example, extract relevant information from the JSON response

        return jsonify(historical_data)
    else:
        return jsonify({'error': 'Unable to retrieve historical weather data.'}), 500

if __name__ == '__main__':
    app.run(debug=True)
